{"meta":{"title":"道墟","subtitle":"初九，潜龙勿用","description":null,"author":"道墟","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-05-29T15:28:54.000Z","updated":"2018-05-30T01:43:46.253Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tag","date":"2018-05-29T15:29:50.000Z","updated":"2018-05-30T01:43:46.257Z","comments":true,"path":"tag/index.html","permalink":"http://yoursite.com/tag/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-30T03:44:46.000Z","updated":"2018-05-30T03:45:39.389Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Init进程","slug":"Init进程","date":"2018-05-31T06:32:19.000Z","updated":"2018-05-31T09:31:51.410Z","comments":true,"path":"2018/05/31/Init进程/","link":"","permalink":"http://yoursite.com/2018/05/31/Init进程/","excerpt":"","text":"本文源码所在文件\\system\\core\\init\\init.cpp 一.概述Init进程是内核启动后创建的第一个用户进程，地位非常的重要。在Init初始化的过程中会启动很多重要的守护进程，当然Init本身也是一个守护进程。 在介绍Init进程前先简单的介绍下Android的启动过程 1.1 bootloader引导1.1.1 什么是bootloader引导当我们按下手机的电源键时，最先运行的就是bootloader.bootloader主要作用就是初始化基本的硬件设备（CPU,内存，Flash等）并且通过建立内存空间的映射，为装载linux内核准备好适合的环境。内核装载完毕，bootloader将会从内存中清除。 1.1.2 Fastboot模式Fastboot是Android设计的一套通过usb来更新手机分区映像的协议。 1.1.3 Recovery模式Android特有的升级系统。利用该模式可以进行恢复出厂设置，执行ota、补丁和固件升级。进入到Recovery模式实际上就是进入了一个文字模式的Linux 1.2 装载和启动Linux内核Android的boot.img存放的就是Linux的内核和一个根文件系统。上面的bootloader会把boot.img映像装载进内存。然后Linux内核会执行整个系统的初始化，完成整个后装载整个根文件系统，最后启动Init进程 什么是根文件系统？根文件系统是Linux系统一种特殊的文件系统，Android是基于Linux的，当然也有根文件系统。android的根文件系统是基于busybox实现的。 1.3 启动android系统android系统的启动可以更加详细的分为以下几个阶段 1.3.1 启动Init进程Init进程是系统启动的第一个进程。在Init的启动过程中会解析Linux的配置脚本init.rc文件。解析init.rc文件，init进程会加载android的文件系统、创建系统目录、初始化属性系统、启动android系统重要的守护进程（USB守护进程、adb守护进程、vold守护进程、rild守护进程）。 Init作为守护进程的作用：修改属性请求、重启崩溃的进程等操作。 1.3.2 启动ServiceManager由init启动。管理binder服务，负责binder的注册和查找。 1.3.3 启动Zygote进程Init进程初始化结束时会启动Zygote进程。Zygote进程负责fork应用进程。是所有应用进程的父进程。 Zygote进程初始化时会创建Dalivik虚拟机、预装载系统的资源文件和Java类。从Zygote中fork的进程都会继承和共享这些预加载的资源。 启动结束后，转为守护进程来响应应用建立的请求。 1.3.4 启动SystemServiceSystemService是Zygote进程fork的第一个进程，也是android系统的核心进程。在SystemService中运行这android大部分的binder服务。 首先会启动SensorService,接着是ActivityManagerService（AMS）,WindowsManagerService（WMS）,PackagerManagerService(PKMS)等服务。 1.3.5 启动LauncherSystemServer加载完所有的服务后，最后会调用AMS中的systemReady()方法。在这个方法的执行过程中会发出Intent(android.intent.category.Home).凡是响应这个Intent的应用都会启动起来（这个流程我们到时候在AMS的分析部分会重点追踪整个过程），这边要跟开机广播区别开来。 二.Init进程的初始化过程Init进程的源码位于\\system\\core\\init\\下。程序的入口函数main()位于init.cpp中。 2.1 main函数的流程2.1.1 选择启动程序因为Init和ueventd和watchdogd守护进程的代码存在大量的代码重合，所以直接合并到一个文件中，通过参数来判断执行那个守护进程。 1234567if (!strcmp(basename(argv[0]), \"ueventd\")) &#123; return ueventd_main(argc, argv);&#125;if (!strcmp(basename(argv[0]), \"watchdogd\")) &#123; return watchdogd_main(argc, argv);&#125; 2.1.2 设置进程创建的文件的属性缺省情况下一个进程创建的文件属性是022，使用umask可以设置文件属性的掩码。参数为0表示掩码为0777。 12// Clear the umask.umask(0); 2.1.3 创建目录和挂载文件系统12345678910111213//确保只执行一次bool is_first_stage = (argc == 1) || (strcmp(argv[1], \"--second-stage\") != 0);// Get the basic filesystem setup we need put together in the initramdisk// on / and then we'll let the rc file figure out the rest.if (is_first_stage) &#123; mount(\"tmpfs\", \"/dev\", \"tmpfs\", MS_NOSUID, \"mode=0755\"); mkdir(\"/dev/pts\", 0755); mkdir(\"/dev/socket\", 0755); mount(\"devpts\", \"/dev/pts\", \"devpts\", 0, NULL); mount(\"proc\", \"/proc\", \"proc\", 0, NULL); mount(\"sysfs\", \"/sys\", \"sysfs\", 0, NULL);&#125; tmpfs是一种基于内存的文件系统，mount后就可以使用。tmpfs文件系统下的所有文件都存放在内存中，访问速度快，但是关机后会消失，适合用来存放临时性的文件。而且tmpfs文件系统的大小是动态变化的，一开始很小，随着文件的增多会随之变大。从上面的代码我们可以看到Android系统将tmpfs文件系统挂载到/dev目录下，而这个目录是用来保存系统创造的设备节点，正好符合tmpfs的特点。 devpts是虚拟终端文件系统，通常mount在目录/dev/pts下。 2.1.4 初始化log系统1234567891011//将标准输入、输出、错误重定向到空设备文件/dev/null下，这是守护进程常用的手段 open_devnull_stdio();//创建设备节点/dev/kmsg,这样init进程就可以使用kernel的log系统，之所以是用使用kernel的log系统是因为这时候android层的log系统还没有启动起来 klog_init();//设置log级别 klog_set_level(KLOG_NOTICE_LEVEL);//打印init进程开始启动的日志 NOTICE(\"init%s started!\\n\", is_first_stage ? \"\" : \" second stage\"); 日志输出级别的宏定义如下 KLOG_ERROR_LEVEL 3 KLOG_WARNING_LEVEL 4 KLOG_NOTICE_LEVEL 5 KLOG_INFO_LEVEL 6 KLOG_DEBUG_LEVEL 7 KLOG_DEFAULT_LEVEL 3 //默认为3当我们设置的级别低于5的时候会输出到 kernel log 中 2.2 启动Service进程","categories":[],"tags":[]},{"title":"开机应用扫描流程","slug":"android6.0/PKMS/开机应用扫描流程","date":"2018-05-30T15:38:00.000Z","updated":"2018-05-31T00:52:32.308Z","comments":true,"path":"2018/05/30/android6.0/PKMS/开机应用扫描流程/","link":"","permalink":"http://yoursite.com/2018/05/30/android6.0/PKMS/开机应用扫描流程/","excerpt":"","text":"","categories":[{"name":"android6.0","slug":"android6-0","permalink":"http://yoursite.com/categories/android6-0/"},{"name":"PackageManagerService","slug":"android6-0/PackageManagerService","permalink":"http://yoursite.com/categories/android6-0/PackageManagerService/"}],"tags":[]},{"title":"动态更改Launch应用","slug":"工作问题/rk/动态更改Launch应用","date":"2018-05-29T15:45:53.000Z","updated":"2018-05-30T01:43:46.249Z","comments":true,"path":"2018/05/29/工作问题/rk/动态更改Launch应用/","link":"","permalink":"http://yoursite.com/2018/05/29/工作问题/rk/动态更改Launch应用/","excerpt":"","text":"","categories":[{"name":"工作问题","slug":"工作问题","permalink":"http://yoursite.com/categories/工作问题/"},{"name":"rk3228&rk3399","slug":"工作问题/rk3228-rk3399","permalink":"http://yoursite.com/categories/工作问题/rk3228-rk3399/"}],"tags":[]},{"title":"源码导航","slug":"android6.0/总览","date":"2018-05-29T05:37:00.000Z","updated":"2018-05-31T00:54:07.158Z","comments":true,"path":"2018/05/29/android6.0/总览/","link":"","permalink":"http://yoursite.com/2018/05/29/android6.0/总览/","excerpt":"","text":"一.引言Android系统非常庞大、错综复杂，其底层是采用Linux作为基底，上层采用包含虚拟机的Java层以及Native层，通过系统调用(Syscall)连通系统的内核空间与用户空间。用户空间主要采用C++和Java代码，通过JNI技术打通用户空间的Java层和Native层(C++/C)，从而融为一体。 限于本人目前的只是水平,本系列的源码分析基本限于framework层的java代码。目前，网上有大量的android系统源码分析的书籍和博客，其实很不多优秀的文章。那为什么要再写一个自己的blog呢？这是因为android源码分析是个工程量非常巨大的事，在学些的过程中很容易迷失在源码的森林中，经常会出现看完一个模块，过一段时间就忘记的情况，所以很有必要将自己看的过程记录下来，同时也加深自己的理解。 首先说明本系列的源码分析是基于android6.0的源码，主要以事件为驱动来分析源码，比如我们我们在分析PKMS（PackageManagerService）服务的时候我们会从开机扫描过程，应用的安装过程等事件的流程进行分析解读。 二.Init进程和Zygote进程三.SystemServer四.PackageManagerService 开机应用扫描流程 应用安装流程 五.ActivityManagerService 开机广播流程 Activity启动流程 Service启动流程 registerReceiver流程 sendBroadcast流程 六.WindowManagerService七.致谢在blog的编写过程中会大量的引用平时看的书籍和前辈优秀的blog,在这边会贴出引用的书籍和blog地址！","categories":[{"name":"android6.0","slug":"android6-0","permalink":"http://yoursite.com/categories/android6-0/"},{"name":"导读","slug":"android6-0/导读","permalink":"http://yoursite.com/categories/android6-0/导读/"}],"tags":[{"name":"android","slug":"android","permalink":"http://yoursite.com/tags/android/"},{"name":"framework","slug":"framework","permalink":"http://yoursite.com/tags/framework/"}]}]}